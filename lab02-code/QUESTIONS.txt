                           __________________

                            LAB 02 QUESTIONS
                           __________________


- Name: Warren Weber
- NetID: weber767

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete Lab01.


PROBLEM 1 `fork1.c'
===================

A
~

  Compile and run the program in `fork1.c'. Show it's output below.

I am number 0, my pid is 16675
I am number 1, my pid is 16676
I am number 2, my pid is 16677
I am number 3, my pid is 16678
I am number 4, my pid is 16679
I am number 5, my pid is 16680
I am number 8, my pid is 16674
I am number 6, my pid is 16681
I am number 7, my pid is 16682

B
~

  Is the output ordered or disordered with respect to the "I am
  number..." statements? Why?

The output is unordered with respect to the "I am number statements", because
the parent keeps calling fork without waiting for the children to finish, so
the children and parent finish based on the order assigned by the scheduling
algorithm.

C
~

  Add calls to the wait() or waitpid() function to ensure that the
  output is ordered. Paste your code below.

  #include <stdio.h>
  #include <unistd.h>
  #include <sys/wait.h>

  int main(void) {
    int i;
    for(i = 0; i<8; i++){
      pid_t child = fork();
      if(child == 0){
        break;
      }
      else {
        waitpid(child, NULL, 0);
      }
    }
    printf("I am number %d, my pid is %d\n",i,getpid());
    return 0;
  }


D
~

  How many parents and children are there in this program? What is their
  arrangement?

The program has one parent and eight children. The parent waits after creating
each child for it to finish before it creates the next. Finally when all its
child processes have finished the parent process finishes.


PROBLEM 2 `fork-exec1.c'
========================

A
~

  Compile and run the program in `fork-exec1.c'. Show it's output below.

  Running command 'ls'
  ------------------
  total 35K
  drwxr-xr-x 2 weber767 CSEL-student    6 Feb  5 14:35 .
  drwx------ 4 weber767 CSEL-student    4 Feb  4 10:07 ..
  -rwx------ 1 weber767 CSEL-student 8.3K Feb  5 14:35 a.out
  -rw-r--r-- 1 weber767 CSEL-student  298 Feb  5 14:25 fork1.c
  -rw-r--r-- 1 weber767 CSEL-student  366 Feb  5 14:35 fork-exec1.c
  -rw-rw---- 1 weber767 CSEL-student 2.7K Feb  5 14:28 QUESTIONS.txt

B
~

  Adjust the contents of the `child_argv[]' array. Try remove the "-l"
  element, try adding on ".." prior to the final NULL, or make other
  modifications INCLUDING for the 0th "ls" string.  Recompile and
  describe whether the output has changed.

  The output changes as the strings in the array are changed.


C
~

  Change the child_cmd string from "ls" to be something else like "gcc"
  or "cat". Recompile ad explain what happens now.

   The child_cmd filename no longer matches the filename in child_argv[0], so
   execvp() errors when it tries run the child_cmd.


D
~

  Currently `fork-exec1.c' does not reach the bottom statements.
  ,----
  |   printf("------------------\n");
  |   printf("Finished\n");
  `----
  Correct this by doing the following:
  - Fork a child process
  - Have ONLY the child process call execvp()
  - Have the parent process wait() for the child
  Paste your code below.

  #include <stdio.h>
  #include <stdlib.h>
  #include <sys/wait.h>
  #include <unistd.h>

  int main(void){

    char *child_argv[] = {"ls", "-l", "-ah", NULL};
    char *child_cmd = "ls";

    printf("Running command '%s'\n",child_cmd);
    printf("------------------\n");

    pid_t child = fork();
    if (child == 0){
      execvp(child_cmd,child_argv);
    }else {
      wait(NULL);
    }
    printf("------------------\n");
    printf("Finished\n");
    return 0;
  }
