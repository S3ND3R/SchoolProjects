                           __________________

                            LAB 09 QUESTIONS
                           __________________


- Name: Warren Weber
- NetID: weber767

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete Lab01.


PROBLEM 1 `server_em.c'
=======================

A
~

  Examine the source code for `em_server.c'. Describe the
  `requests.fifo' item that it creates.  Resolve theses specific items
  1. What system call is used initially to delete any existing version
     of `requests.fifo'?
  2. What system call is used to create `requests.fifo'?
  3. What system call is used to set up reading from `requests.fifo'?

  ------------------------------------------------------------------------------
    'request.fifo' is a FIFO, which is a named pipe. It is similar to a pipe,
    except it persists as a special type of file, which allows it to outlive
    the process that created it. This allows for multiple processes that are
    unrelated to share access to the FIFO, whereas a pipe can only connect
    related processes.

  1. remove()

  2. mkfifo()

  3. open()
  ------------------------------------------------------------------------------
B
~

  In the main `while()' loop of the server, describe how the server
  handles requests from the client.
  1. What C data type represents the requests from clients and what
     parts does it have?
  2. How does the server use the request data to search for a name/email
     association?
  3. How does the server use the request data to communicate back to the
     client?
  ------------------------------------------------------------------------------
  1. request_t
      - char client_fifo[], a filename connected to a FIFO
      - char query_name[], name attached to an email

  2. The server reads from 'requests.fifo' into request, a request_t data
     type. Then a for loop runs through the data array checking the each name
     against 'request.query_name'. If a match is found the variable 'email' is
     to the email associated with that name, else 'email' contains "NOT FOUND".

  3. The server opens the FIFO that was passed into 'request.client_fifo' and
     writes to it.
  ------------------------------------------------------------------------------

PROBLEM 2 `em_client.c' and Protocol
====================================

A
~

  Examine the code for `em_client.c'. Describe the steps that it
  performs to contact the server to make a request and then receive the
  response.  Describe how system calls are used in this process.

  ------------------------------------------------------------------------------
  Step 1: SETUP
    The client creates a request using the 'request_t' data type. Then makes a
    FIFO that it can pass to the server which can be written to later on.
      - getpid() is used for naming the FIFO
      - mkfifo() is used for naming the client FIFO that the server will be able
        to see when it checks 'request.client_fifo'

  STEP 2: SENDING THE REQUEST
    The client then opens the FIFO related to the server and writes their
    request to it.
      - open() used to open the server FIFO 'request.fifo'
      - write() used to write the request to the FIFO

  STEP 3: RECEIVING THE RESPONSE
    The client reads from 'request.client_fifo' to see the servers response
      - read() is used to read from the file, and it causes the client to wait
        for a response from the server
  ------------------------------------------------------------------------------

B
~

  Describe the overall Protocol of communication of between the server
  and client. Which entity is responsible for creating, reading, and
  writing each FIFO at what time.

  ------------------------------------------------------------------------------
  1. Server creates 'requests.fifo' FIFO
  2. Server opens 'requests.fifo' and attempts to read from it, which will block
     the process until something is written to that FIFO
  3. Client creates the 'request.client_fifo'
  4. Client opens 'requests.fifo'
  5. Client writes to 'requests.fifo'
  NON-DETERMINISTIC BEHAVIOR ???
  6. Client opens 'request.client_fifo'
  7. Client attempts to read from 'request.client_fifo', if nothing is written
     to the FIFO yet it will block the process
  8. Server opens 'request.client_fifo'
  9. Server writes to 'request.client_fifo'
  10. Server closes 'request.client_fifo'
  11. Client closes 'request.client_fifo'
  12. Client closes 'requests.fifo'
  13. Client removes 'request.client_fifo'
  ------------------------------------------------------------------------------

C
~

  Use the provided script `run_simulation.sh <N>' to launch start a
  server and run a specified number of clients such as 5 as below
  ,----
  | > ./run_simulation.sh 5
  | SERVER 14205: starting up
  | SERVER 14205: created new requests.fifo, now opening it
  | SERVER 14205: opened requests.fifo, listening for requests
  | CLIENT 14208: sending request: {fifo_file='14208.fifo' query_name='Christopher Jonathan' }
  | CLIENT 14208: opening '14208.fifo'
  | ...
  | SERVER 14205: closing connection to fifo '14212.fifo'
  | CLIENT 14211: response for name 'Dan Knights' is email 'knights@cs.umn.edu'
  | CLIENT 14212: response for name 'George Karypis' is email 'karypis@cs.umn.edu'
  | >
  `----
  Examine the output for this run along with running the simulation
  several more times with different numbers of clients.

  Explain why there never seems to be any problem with multiple clients
  overwriting data associated with each other particularly in the
  `requests.fifo' and the client responses.

  ------------------------------------------------------------------------------
  FIFOs have one offset that the operating system keeps track of, so they will
  never overwrite a previous request in `requests.fifo', and the FIFO writes
  atomically, so the entire write from a client is completed before the next.
  The client response FIFO is specific to each client process.
  ------------------------------------------------------------------------------


PROBLEM 3: Pitfalls
===================

A
~

  Compile the server/client with `make' and run the server via
  ,----
  | > ./em_server
  `----
  Note the output that it prints. Then kill the server, perhaps with a
  C-c interrupt signal.

  Edit the `em_server.c' code to use the line marked `ALTERNATE
  OPEN'. You should comment on the preceding `open()' line to get
  ,----
  | // int requests_fd = open("requests.fifo", O_RDWR);               // open FIFO read/write to avoid blocking
  | int requests_fd = open("requests.fifo", O_RDONLY);             // ALTERNATE OPEN: read only
  `----

  Recompile and re-run `em_server' and explain why the output of the
  server changes in this case. To understand the change in output, you
  may need to review what happens when a process opens only one end of a
  pipe/FIFO.

  ------------------------------------------------------------------------------
  When only one end of a FIFO has been opened the process is sent a SIGPIPE
  signal and will be blocked until the other end of the FIFO has been opened.
  ------------------------------------------------------------------------------

B
~

  With the ALTERNATE OPEN line in use (uncommented), run the
  `run_simulation.sh 5' script a few times until it appears to stall and
  fail to complete.

  Examine the output of the simulation run carefully and find a line
  involving the server that gives some hints as to why the simulation
  fails. Show that line below.

  ,----
    SERVER: read 0 bytes from requests.fifo; empty pipe, exiting
  `----

C
~

  Do some careful thinking, reading, and exploration and explain why the
  ALTERNATE OPEN line creates a flaw in the server/client protocol that
  is present in the original version.

  ------------------------------------------------------------------------------
    non-blocking 
  ------------------------------------------------------------------------------
